
	var view_angle = 45;
	var aspect = width/height;
	var near = 0.1;
	var far = 1000;
	var focus = new THREE.Vector3(-10,300,0);
	var position = new THREE.Vector3(0,0,-200);
	var changed = true;
	var composer;
	var bgComposer;
	var fxaaShader;	
	var resized = false;

	var productID = 0;

	jQuery(window).on('resize', function(e) {
		
		
		width = jQuery('.customiser').width();
		height = width/aspect;

		//fxaaShader.uniforms['resolution'].value = new THREE.Vector2(1/width, 1/height);

		//composer = new THREE.EffectComposer(renderer);
                //                        composer.addPass(new THREE.RenderPass(scene, camera));

                        //                var dotScreenEffect = new THREE.ShaderPass( THREE.DotScreenShader );
                      //                  dotScreenEffect.uniforms[ 'scale' ].value = 4;

                    //                    fxaaShader = new THREE.ShaderPass(THREE.FXAAShader);
                  //                      fxaaShader.uniforms['resolution'].value = new THREE.Vector2(1/width, 1/height);

                //                        fxaaShader.renderToScreen = true;
                //                        composer.addPass(fxaaShader);

		//jQuery('canvas').remove();
		//init(productID);

		resized = true;
		renderer.setSize(width, height);
	
	
	});
	
	var width = jQuery('.customiser').width();
        var aspect = 1.33334;
        var height = width/aspect;


	var texture = THREE.ImageUtils.loadTexture('catalog/view/theme/gentle/image/webgl-customiser/Background.jpg');
	var backgroundMesh = new THREE.Mesh(
		new THREE.BoxGeometry(100,100,100),
		new THREE.MeshBasicMaterial({
			map: texture

		}));


	backgroundMesh.doubleSided = true;
	//backgroundMesh.material.depthTest = false;
	//backgroundMesh.material.depthWrite = false;
	backgroundMesh.position.set(0, 0, -50)

	//Create the Background Scene.

	var backgroundScene = new THREE.Scene();
	var backgroundCamera = new THREE.PerspectiveCamera();

	camera = new THREE.PerspectiveCamera(view_angle, aspect, near, far);
	backgroundCamera.position.set(0,0,100);
	backgroundCamera.lookAt(new THREE.Vector3(0,0,0));
	backgroundScene.add(backgroundCamera);
	backgroundScene.add(backgroundMesh);

	foregroundScene = new THREE.Scene();
	foregroundCamera = new THREE.PerspectiveCamera();

	backgroundCamera.position.set(0,0,100);
	backgroundCamera.lookAt(new THREE.Vector3(0,0,0));

	foregroundScene.add(foregroundCamera);

	var view_angle = 45;
	var near = 0.1;
	var far = 1000;
	var focus = new THREE.Vector3(-10,300,0);
	var position = new THREE.Vector3(0,0,-200);

	var renderer;
	var camera;
	var scene;
	var manager = new THREE.LoadingManager();

	//var frontTextures = [];
	//var innerTextures = [];
	//var outerTextures = [];

	var textures = [];
	var textureMap = {};

	var spinner;

	var curTable;

	/**var currentFrontMaterial = "G_Front_Back";
	var currentInnerMaterial = "G_inner_Wrap";
	var currentOuterMaterial = "G_outer_Wrap";**/

	var floor;

	var objects = [];
	var options = [];

	var curTextures = {};
	var LoadingObject = function() {

		this.total = 1;
		this.loading = 1;
	
		this.load = function() {
	
			this.total++;
			this.loading++;
			console.log(this.loading);
	
		}
	
		this.unload = function() {
	
			if (this.loading > 0) {
		
				this.loading--;
			
			}
		
			console.log(this.loading);
	
		}
	
		this.loaded = function() {
	
			return this.loading <= 0;
	
		}
	
		this.getTotal = function() {
	
			return this.total;
	
		}

	}



	var Loading = new LoadingObject();

	var onProgress = function(xhr) {

		if (xhr.lengthComputable) {

			var percentComplete = xhr.loaded / xhr.total * 100;

		}

	};

	var onError = function(xhr) {

		//console.log('Error loading file.');

	}

	var table;
	var geometry;
	var material;

	manager.onProgress = function(item, loaded, total) {

		//console.log(item, loaded, total);

	}	

	var initLighting = function() {
		
		// ***************************************
		// GENERAL POSITIONAL COMMENTS
		//(x, y, z) (
		// for x positive is left
		// for y positive is up
		// for z positive is away from the camera
		// ***************************************

		var ambiantLight = new THREE.AmbientLight(/**0x2a2a2a**/ 0x3a3a3a);

		//var light = new THREE.DirectionalLight(0xFFFFFF, 1.0);
		//light.position.set(0.5, -0.4, 1.0);
		//light.shadowCameraVisible = true;

		var spotlight3 = new THREE.PointLight(0xFFFFFF, 1.3);
		spotlight3.position.set(-230, 60, -84);
		//spotlight3.position.set(-30, 0, -150);
		
		var light4 = new THREE.SpotLight(0xFFFFFF, 4.0, 175, Math.PI/2);
		light4.position.set(20, 195, 0);
		//spotlight3.shadowCameraNear = 0.01;
		//spotlight3.shadowDarkness = 0.1;
		spotlight3.shadowMapWidth = 2048;
		spotlight3.shadowMapHeight = 2048;
		//spotlight3.castShadow = true;
		
		var point = new THREE.PointLight(0xffffff, 0.8);
		//point.position.set(250, 125, -150);
		point.position.set(100, 92, 43);
				
		scene.add(point);
		//back left highlight
		scene.add(spotlight3)
		//front right
		scene.add(light4);
		//top right
		scene.add(ambiantLight);
		//ambient
		
		var posX = 0;
		var distance = 1000;
		var rad = 0;
		var hyph;
		var adj;
		
		/**function changePosition() {
		
			rad = (rad + 0.01) % (Math.PI*2);
			hyph = rad * distance;
			
			adj = distance * Math.tan(rad);
			
			console.log(posX)
			
			
			point.position.set(87, distance*Math.cos(rad), distance*Math.sin(rad));
		
			requestAnimationFrame(changePosition);
		
		}
		
		changePosition();**/
		
		//scene.add(light);

	}

	var addFloor = function() {

		var geometry = new THREE.BoxGeometry(1,1,1);
		var material = new THREE.MeshPhongMaterial({
			ambient: 0xFFFFFF,
			color: 0xFF,
			shininess: 20,
			specular: 0x888888,
		});

		var cube = new THREE.Mesh(geometry, material); 

		cube.traverse(function(object) {

			object.recieveShadow = true;
			object.castShadow = false;

		});
	
		cube.position.y = 0.2;
		cube.position.x = 0.2;
		cube.position.z = 0;
		floor = cube;

		//scene.add(cube);
		cube.receiveShadow = true;

	}

	var animate = function() {

		requestAnimationFrame(animate);
		renderer.clear();

		if (!Loading.loaded()) {

			if (jQuery('.customiser .spinner-loader').length <= 0) {
			
				jQuery('.customiser').append("<div class='spinner-loader'></div><div class='spinner-loader-text'>Loading..</div>");
		
			}	//console.log(spinner);
		

		} else {

			if (jQuery('.customiser .spinner-loader').length > 0) {

				jQuery('.spinner-loader, .spinner-loader-text').remove();

			}
		
			for(var i = 0; i < objects.length; i++) {

				objects[i].manipulation();

			}

			//composer = new THREE.EffectComposer(renderer);
                        //composer.addPass(new THREE.RenderPass(scene, camera));

			//fxaaShader = new THREE.ShaderPass(THREE.FXAAShader);
                        //fxaaShader.uniforms['resolution'].value = new THREE.Vector2(1/width, 1/height);

                        //fxaaShader.renderToScreen = true;
                        //composer.addPass(fxaaShader);


			renderer.autoClear = false;
			renderer.clear();	
			
			//composer.addPass(new THREE.RenderPass(scene,camera));
			
			//var dotScreenEffect = new THREE.ShaderPass( THREE.DotScreenShader );
			//dotScreenEffect.uniforms[ 'scale' ].value = 4;
			//dotScreenEffect.renderToScreen = true;
			//composer.addPass( dotScreenEffect );

			//renderer.render(backgroundScene, backgroundCamera);

			//renderer.render(scene, camera);
			//bgComposer.render();
			
			if(!resized) {
				composer.render();
			} else {
				renderer.render(scene,camera);

			}			


			//var materialScreen = new THREE.ShaderMaterial({map: drawBuffer});
			
			/**var materialScreen = new THREE.ShaderMaterial( {

					uniforms: { tDiffuse: { type: "t", value: drawBuffer } },
					vertexShader: document.getElementById( 'vertexShader' ).textContent,
					fragmentShader: document.getElementById( 'fragment_shader_screen' ).textContent,

					depthWrite: false

				} );

			var foregroundMesh = new THREE.Mesh(new THREE.PlaneBufferGeometry(width * 4, height * 4), materialScreen);
			foregroundMesh.position.set(0,0,-500);
			foregroundMesh.doubleSided = true;
			foregroundScene.add(foregroundMesh);

			//renderer.render(foregroundScene, backgroundCamera);**/

			//console.log(materialScreen);
			
			//jQuery('#renderedTable').remove();
			//jQuery('div.customiser').append("<img id='renderedTable' src='" + renderer.domElement.toDataURL() + "' />");

			//console.log(renderer.domElement.toDataURL());
		
		}

	}

	var initRenderer = function() {
		
				renderer = new THREE.WebGLRenderer({preserveDrawingBuffer: true, antialias: true, alpha: true, precision: "highp"});

				console.log(renderer);

				console.log("Context:");
				console.log(renderer.getContext());
				
				if (renderer.getContext()) {

					renderer.shadowMapEnabled = true;
					renderer.shadowMapSoft = true;
					renderer.shadowMapType = THREE.PCFSoftShadowMap;
					renderer.shadowCameraNear = 3;
					renderer.shadowCameraFar = camera.far;
					renderer.shadowCameraFov = 50;
					renderer.shadowMabBias = 0.0039;
					renderer.shadowMapDarkness = 0.5;
					renderer.setSize(width, height);
					drawBuffer = new THREE.WebGLRenderTarget(width * 4, height * 4);
					renderer.domElement.id = "customiserCanvas";
					composer = new THREE.EffectComposer(renderer);
					composer.addPass(new THREE.RenderPass(scene, camera));
	
					var dotScreenEffect = new THREE.ShaderPass( THREE.DotScreenShader );
                        		dotScreenEffect.uniforms[ 'scale' ].value = 4;
                        		
					fxaaShader = new THREE.ShaderPass(THREE.FXAAShader);
					fxaaShader.uniforms['resolution'].value = new THREE.Vector2(1/width, 1/height);					

					fxaaShader.renderToScreen = true;
					composer.addPass(fxaaShader);					

					var dlink = "<a id='customiserImage' download>Picture</a>";
					
					jQuery('div.customiser').append(renderer.domElement);

				} else {

					jQuery('div.main-image').removeClass('hidden');
					jQuery('div#customiser').addClass('hidden');

				}

	}

	var initCamera = function() {

		camera = new THREE.PerspectiveCamera(view_angle, aspect, near, far);

		camera.position.set(50,75,-100);
		
		//camera.position.set(87, 92, 43);
		camera.lookAt(focus);

	}

	var setCameraLookAt = function(table) {

		var boundingBox = new THREE.Box3().setFromObject(table);
		var floorBox = new THREE.Box3().setFromObject(floor);
	
		focus.y = 10/**(boundingBox.max.y / 2) + floorBox.max.y;**/
		focus.z = (boundingBox.max.z - boundingBox.min.z)/2
		camera.lookAt(focus);

	}

	var initScene = function() {

		scene = new THREE.Scene();

	}

	var init = function(product) {

		try {

			productID = product;
			var baseDir = SITE_BASE_URL; /**"http://" + window.location.host + window.location.pathname;**/ 
			var url = baseDir + "?route=module/customiser/getproducttable&product_id=";
			console.log(url);

			initCamera();
			initScene();
			initRenderer();

			var texture = THREE.ImageUtils.loadTexture('catalog/view/theme/gentle/image/webgl-customiser/Background.jpg');
        		var backgroundMesh = new THREE.Mesh(
                		new THREE.PlaneGeometry(width+200,height),
                		new THREE.MeshBasicMaterial({
                        		map: texture

                	}));

			backgroundMesh.lookAt(camera.position);
			backgroundMesh.position.set(0,0,100)

			scene.add(backgroundMesh);
			//backgroundScene.add(backgroundMesh);

			initLighting();

			addFloor();
			
			var geometry = new THREE.BoxGeometry( 10, 10, 10 );
			var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );
			
	
			jsonHttpRequest(url + product, function(json) {
	
				console.log(json);

				if (json['enabled'] == 1) {
				
					setTable(json['Table_ID'], json['scale'], json['rotation'], json['translation_x'], json['translation_y']);
				
				} else {

					jQuery('.main-image').removeClass('hidden');
					jQuery('div#customiser').remove();

				}	


			});

			animate();
		
		} catch (err) {
		
			jQuery('.main-image').removeClass('hidden');
			jQuery('div#customiser').remove();
					
		}

	}

	var getAJAXObject = function() {

		var xmlhttp;

		if (window.XMLHttpRequest) {

			xmlhttp = new XMLHttpRequest();

		} else {

			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");

		}

		return xmlhttp;

	}

	var jsonHttpRequest = function(url, method) {

		var xmlhttp = getAJAXObject();

		xmlhttp.open("GET", url, true);
		xmlhttp.timeout = 4000;
		xmlhttp.send();

		xmlhttp.onreadystatechange = function() {

			if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {

				console.log(url);
				var response = JSON.parse(xmlhttp.responseText)
				method(response);
			

			}

		}
	

	}

	var addInterface = function() {

		jQuery("body").append('<button id="export" value="Export">Export</button>')

	}

	var setTable = function getModel(tableID, scale, rot, x, y) {

		var host = SITE_BASE_URL;/**window.location.host + window.location.pathname;**/
	
		var url = host + "?route=module/customiser/gettable&table_id=" + tableID

		console.log("URL: " + url);
		
		jsonHttpRequest(url, function(json) {
		
			console.log("Table Json Object");
			console.log(json);
	
			var baseURL = "/assets/files/";
			
			console.log("The Base: " + baseURL);
			table = new Table(baseURL + json.Object_File, baseURL + json.Material_File, [], tableID, scale, rot, x, y);
			console.log(table);

			table.init(options);

		});

	}
