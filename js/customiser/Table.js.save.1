const SITE_BASE_URL = window.location.protocol + "//zespoke2.kinodev.co.uk";

function Table(model, mtl, textures, reflection, id, scale, rot, x, y) {

	this.id = id;
	this.table;
	this.model = model;
	this.textures = textures;
	this.mtl = mtl;
	this.position = new THREE.Vector3(0,0,0);
	this.scale = new THREE.Vector3(scale,scale,scale);
	this.rotation = rot;
	this.translation = new THREE.Vector3(x, y, 0);
	this.reflection = reflection;

	this.manipulation = function() {

		this.table.position.set(this.position.x, this.position.y, this.position.z);

	};
	
	this.setUpMaterial = function(object) {
	
		object.material.map.wrapT = THREE.RepeatWrapping;
		object.material.map.wrapS = THREE.RepeatWrapping;
		object.material.map.repeat.set(2,4);
	
	};
	
	this.getMaterial = function(ref, name, visible, matt, reflection, intensity, texture) {
	
		var args = {};
		var material;
		
		args['name'] = ref;
		args['map'] = texture;
		args['visible'] = visible;
	
		if (matt) {
		
			args['shininess'] = 60;
			args['specular'] = 0x111111;
			args['color'] = 0xFFFFFF;
			args['refractionRation'] = 0.11;
			args['reflectivity'] = 0.3;
			
			/**if (reflection) {
			
				loader.load( SITE_BASE_URL + "/image/data/serveimage.jpg", function(texture) {
				
					texture.mapping = THREE.SphericalReflectionMapping;
					object.material.envMap = texture;
					object.material.needsUpdate = true;
					
					object.material.reflectivity = intensity;
					
				});
			
			}**/
		
		} else {
		
			args['shininess'] = 100;
			args['specular'] = 0x0a0a0a;
		
		}
		
		if (matt) {
		
			material = new THREE.MeshPhongMaterial(args);
		
		} else {
		
			material = new THREE.MeshLambertMaterial(args);
		
		}
		
		return material;
	
	}

	this.load = function(table) {

		var changeYRotation = 0;

		table.position.set(this.position.x + parseFloat(this.translation.x), this.position.y + parseFloat(this.translation.y), this.position.z);// = this.position;
		table.rotation.y = this.rotation;
		table.castShadow = true;
		table.scale.set(this.scale.x, this.scale.y, this.scale.z);

		table.updatePosition = function(translation) {

			var boundingBox = new THREE.Box3().setFromObject(table);
			var floorBox = new THREE.Box3().setFromObject(floor);

			var yTranslation = (boundingBox.min.y - floorBox.max.y)*-1;
			this.translateY(yTranslation + parseFloat(translation.y));

		}

		table.updatePosition(this.translation);

		table.traverse(function(object) {

			object.castShadow = true;

			if (object instanceof THREE.Mesh) {

				if (object.material.name == "Inside") {
				
					var envMap = THREE.ImageUtils.loadTexture('Tex/envmap2.jpg');

				}
				
				if (object.material.name == "option_shelf") {

					object.material.color.setHex(0x2A8B93);

				}

			}

		});
	
		var host = SITE_BASE_URL;

		var url = "http://" + host + "?route=module/customiser/gettextures&table_id=" + this.id;
		var textLoc = "http://" + window.location.host + "/assets/files/textures/";
		var that = this;
		var texturesCache = {};
	
		var setUpMaterials = function(object, item, loading) {
		
			var matt = item.matt === "0";
			var ref = item.Ref;
			var name = item.name;
			var reflection = item.reflection == "1";
			var reflectivity = 0.35;
			var visible = object.material.visible;
			
			object.material = that.getMaterial(ref, name, visible, matt, reflection, reflectivity, texturesCache[item.name]);
			that.setUpMaterial(object);
		
		}
	
		var loadTexture = function(object, item) {
		
			if (object.material.name == item.Ref) {
			
				if (item.name.indexOf("Yes") >= 0) {
				
					object.material.visible = true;
				
				} else if (item.name.indexOf("No") >= 0) {
				
					object.material.visible = false;
				
				} else {
				
					var imgUrl = SITE_BASE_URL + "/image/" + item.image;
					var loader = new THREE.TextureLoader();
					
					if (!(item.name in texturesCache)) {
					
						loader.load(imgUrl, function(texture) {
						
							texturesCache[item.name] = texture;
							setUpMaterials(object, item);
						
						});
					
					} else {
					
						setUpMaterials(object, item);
					
					}
				
				}
			
			}
		
		}
	
		var loadTextures = function(json) {
	
			table.traverse(function (tobject) {
		
				if (tobject instanceof THREE.Mesh) {
			
					json.forEach(function(jsonItem, i, json) {
					
						loadTexture(tobject, json[i]);
					
					});
				
				}
				
			});

		}
	
		jQuery('.dd-option').on('click', function(e) {

			var value = jQuery(this).children('input.dd-option-value').val();
			var url = SITE_BASE_URL + "?route=module/customiser/getproductoption&option_id=" + value;
			jsonHttpRequest(url, loadTextures);
	
		});

		var glassShelf = false;
		var backPlate = false;
		var feet = false;

		

		/**table.traverse(function(object) {

				//console.log(object);

			if (object instanceof THREE.Mesh) {

				if (object.material.name == "Glass") {

					glassShelf = true;

				} else if (object.material.name == "Backplate") {

					backPlate = true;

				} else if (object.material.name == "Metal") {

					feet = true;

				}

			}

		})**/

			/**if (glassShelf) {

				jQuery('body').append('<input type="checkbox" name="Glass" checked="checked" /><label for="Glass">Glass Shelf</label>');

			}

			if (backPlate) {

				jQuery('body').append('<input type="checkbox" name="Backplate" checked="checked" /><label for="Backplate">Back Plate</label>');

			}

			if (feet) {

				jQuery('body').append('<input type="checkbox" name="Metal" checked="checked" /><label for="Metal">Feet</label>');

			}**/

			for(var i = 0; i < options.length; i++) {

				var enabled = false;

				if (options[i].Enabled == 1) {

					enabled = true;

				}

				jQuery('input[type=checkbox][name=' + options[i].Table_Option + ']').prop('checked', enabled);

				table.traverse(function(object) {

					if (object instanceof THREE.Mesh) {

						if (object.material.name == options[i].Table_Option) {

							object.material.visible = enabled;
							object.castShadow = enabled;

						}

					}

				})

			}

	
		table.castShadow = true;
		table.receiveShadow = true;
		setCameraLookAt(table);
		scene.add(table);
		curTable = table;
		changed = true;
	
		if (jQuery('.dd-option-selected').length > 0 ) {
	
			var defaults = jQuery('.dd-option-selected');
			//console.log("Default Values");
	
			for (var i = 0; i < defaults.length; i++) {
		
				var value = jQuery(defaults[i]).find('input').val();
				
				if (value > 0) {
				
					var url = SITE_BASE_URL + "?route=module/customiser/getproductoption&option_id=" + value;	
			
					jsonHttpRequest(url, loadTextures);
					
				}
			
		
			}			
	
		}

	}

	this.init = function() {

		var loader;

		if (this.mtl) {

			loader = new THREE.OBJMTLLoader(new THREE.LoadingManager());
			loader.load(this.model, this.mtl, this.load, this.onProgress, this.onError, this);

		} else {

			loader = new THREE.OBJLoader(new THREE.LoadingManager());
			loader.load(this.model, this.load, this.onProgress, this.onError, this);

		}

	}

}
